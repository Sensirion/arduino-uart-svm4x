/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * Generator:     sensirion-driver-generator 0.33.0
 * Product:       svm4x
 * Model-Version: 2.0.3
 */
/*
 * Copyright (c) 2023, Sensirion AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Sensirion AG nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef NO_ERROR
#define NO_ERROR 0
#endif

#ifndef SENSIRIONUARTSVM4X_H
#define SENSIRIONUARTSVM4X_H

#include "Arduino.h"
#include <SensirionCore.h>

#define SVM4X_SHDLC_ADDR 0x00

class SensirionUartSvm4x {
  public:
    SensirionUartSvm4x();
    /**
     * @brief Initializes the SVM4x class.
     *
     * @param serial Arduino stream object to be used for communication.
     */
    void begin(Stream& serial);

    /**
     * @brief Read measurement data and apply scaling.
     *
     * @param[out] aHumidity Compensated ambient humidity in %RH.
     * @param[out] aTemperature Compensated ambient temperature in degrees
     * celsius.
     * @param[out] aVocIndex VOC Index
     * @param[out] aNoxIndex NOx Index
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t readMeasuredValues(float& aHumidity, float& aTemperature,
                               float& aVocIndex, float& aNoxIndex);

    /**
     * @brief getTemperatureOffsetForRhtMeasurements
     *
     * Gets the T-Offset for the temperature compensation of the RHT algorithm.
     *
     * @param[out] arg0
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t getTemperatureOffsetForRhtMeasurements(float& arg0);

    /**
     * @brief setTemperatureOffsetForRhtMeasurements
     *
     * This command sets the temperature offset used for the compensation of
     * subsequent RHT measurement
     *
     * @param[in] tOffset Temperature offset as float in degrees celsius.
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t setTemperatureOffsetForRhtMeasurements(float tOffset);

    /**
     * @brief getProductType
     *
     * Gets the product type from the device.
     *
     * @param[out] productType Character array containing the product type.
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t getProductType(int8_t productType[], uint16_t productTypeSize);

    /**
     * @brief getProductName
     *
     * Gets the product name from the device.
     *
     * @param[out] productName Character array containing the product name.
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t getProductName(int8_t productName[], uint16_t productNameSize);

    /**
     * @brief getSerialNumber
     *
     * Gets the serial number from the device.
     *
     * @param[out] serialNumber Character array containing the serial number.
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t getSerialNumber(int8_t serialNumber[], uint16_t serialNumberSize);

    /**
     * @brief getVersion
     *
     * Gets the version information for the hardware, firmware and SHDLC
     * protocol.
     *
     * @param[out] firmwareMajor Firmware major version number.
     * @param[out] firmwareMinor Firmware minor version number.
     * @param[out] firmwareDebug Firmware debug state. If the debug state is
     * set, the firmware is in development.
     * @param[out] hardwareMajor Hardware major version number.
     * @param[out] hardwareMinor Hardware minor version number.
     * @param[out] protocolMajor Protocol major version number.
     * @param[out] protocolMinor Protocol minor version number.
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t getVersion(uint8_t& firmwareMajor, uint8_t& firmwareMinor,
                       bool& firmwareDebug, uint8_t& hardwareMajor,
                       uint8_t& hardwareMinor, uint8_t& protocolMajor,
                       uint8_t& protocolMinor);

    /**
     * @brief deviceReset
     *
     * Executs a reset on the device.
     *
     * @note The device will reply before executing the reset. If the command is
     * send with broadcast, the reset is done directly after the reception of
     * the command.
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t deviceReset();

    /**
     * @brief getSystemUpTime
     *
     * Get the system up time of the device.
     *
     * @param[out] systemUpTime The time since the last power-on or device reset
     * in seconds.
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t getSystemUpTime(uint32_t& systemUpTime);

    /**
     * @brief startMeasurement
     *
     * Starts measurement in polling mode.
     *
     * @note This command is only available in idle mode.
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t startMeasurement();

    /**
     * @brief stopMeasurement
     *
     * Leaves the measurement mode and returns to the idle mode.
     *
     * @note This command is only available in measurement mode.
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t stopMeasurement();

    /**
     * @brief readMeasuredValuesAsIntegers
     *
     * Read measurement data as integers. This command is named get_signals in
     * the datasheet.
     *
     * @param[out] humidity Compensated ambient humidity in % RH with a scaling
     * factor of 100.
     * @param[out] temperature Compensated ambient temperature in degrees
     * celsius with a scaling of 200.
     * @param[out] vocIndex VOC index with a scaling value of 10.
     * @param[out] noxIndex NOx index with a scaling value of 10.
     *
     * @note This command is only available in measurement mode. The firmware
     * updates the measurement values every second. Polling data with a faster
     * sampling rate will return the same values. The first measurement is
     * available 1 second after the start measurement command is issued. Any
     * readout prior to this will return zero initialized values.
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t readMeasuredValuesAsIntegers(int16_t& humidity,
                                         int16_t& temperature,
                                         int16_t& vocIndex, int16_t& noxIndex);

    /**
     * @brief readMeasuredRawValues
     *
     * Read measuremed raw values. This command is named get_signals_raw in the
     * datasheet.
     *
     * @param[out] rawHumidity Uncompensated raw humidity in % RH as read from
     * the SHT40 with a scaling factor of 100.
     * @param[out] rawTemperature Uncompensated raw temperature in degrees
     * celsius as read from the SHT40 with a scaling of 200.
     * @param[out] rawVocTicks Raw VOC output ticks as read from the SGP sensor.
     * @param[out] rawNoxTicks Raw NOx output ticks as read from the SGP sensor.
     *
     * @note This command is only available in measurement mode. The firmware
     * updates the measurement values every second. Polling data with a faster
     * sampling rate will return the same values. The first measurement is
     * available 1 second after the start measurement command is issued. Any
     * readout prior to this will return zero initialized values.
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t readMeasuredRawValues(int16_t& rawHumidity, int16_t& rawTemperature,
                                  uint16_t& rawVocTicks, uint16_t& rawNoxTicks);

    /**
     * @brief llgetTemperatureOffsetForRhtMeasurements
     *
     * Gets the T-Offset for the temperature compensation of the RHT algorithm.
     * This command is named get_temperature_offset in the datasheet.
     *
     * @param[out] tOffset Temperature offset which is used for the RHT
     * measurements. Values are in degrees celsius with a scaling of 200. Thus
     * the received value must be divided by 200.
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t llgetTemperatureOffsetForRhtMeasurements(int16_t& tOffset);

    /**
     * @brief getVocTuningParameters
     *
     * Gets the currently set parameters for customizing the VOC algorithm. This
     * command is named get_voc_parameters in the datasheet.
     *
     * @param[out] vocIndexOffset VOC index representing typical (average)
     * conditions.
     * @param[out] learningTimeOffsetHours Time constant to estimate the VOC
     * algorithm offset from the history in hours. Past events will be forgotten
     * after about twice the learning time.
     * @param[out] learningTimeGainHours Time constant to estimate the VOC
     * algorithm gain from the history in hours. Past events will be forgotten
     * after about twice the learning time.
     * @param[out] gatingMaxDurationMinutes Maximum duration of gating in
     * minutes (freeze of estimator during high VOC index signal). Set to zero
     * to disable the gating.
     * @param[out] stdInitial Initial estimate for standard deviation. Lower
     * value boosts events during initial learning period, but may result in
     * larger device-to-device variations.
     * @param[out] gainFactor Gain factor to amplify or to attenuate the VOC
     * index output.
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t getVocTuningParameters(int16_t& vocIndexOffset,
                                   int16_t& learningTimeOffsetHours,
                                   int16_t& learningTimeGainHours,
                                   int16_t& gatingMaxDurationMinutes,
                                   int16_t& stdInitial, int16_t& gainFactor);

    /**
     * @brief getNoxTuningParameters
     *
     * Gets the currently set parameters for customizing the NOx algorithm. This
     * command is named get_nox_parameters in the datasheet.
     *
     * @param[out] noxIndexOffset NOx index representing typical (average)
     * conditions.
     * @param[out] learningTimeOffsetHours Time constant to estimate the NOx
     * algorithm offset from the history in hours. Past events will be forgotten
     * after about twice the learning time.
     * @param[out] learningTimeGainHours The time constant to estimate the NOx
     * algorithm gain from the history has no impact for NOx. This parameter is
     * still in place for consistency reasons with the VOC tuning parameters
     * command. This getter will always return the default value.
     * @param[out] gatingMaxDurationMinutes Maximum duration of gating in
     * minutes (freeze of estimator during high NOx index signal). Set to zero
     * to disable the gating.
     * @param[out] stdInitial The initial estimate for standard deviation has no
     * impact for NOx. This parameter is still in place for consistency reasons
     * with the VOC tuning parameters command. This getter will always return
     * the default value.
     * @param[out] gainFactor Gain factor to amplify or to attenuate the NOx
     * index output.
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t getNoxTuningParameters(int16_t& noxIndexOffset,
                                   int16_t& learningTimeOffsetHours,
                                   int16_t& learningTimeGainHours,
                                   int16_t& gatingMaxDurationMinutes,
                                   int16_t& stdInitial, int16_t& gainFactor);

    /**
     * @brief storeNvData
     *
     * This command stores all parameters previously set with the commands
     * set_temperature_offset_for_rht_measurements, set_voc_tuning_parameters
     * and set_nox_tuning_parameters to the non-volatile memory of SVM4x. These
     * parameters will not be erased during reset and will be used by the
     * corresponding algorithms after start-up. To reset the storage to factory
     * settings the master has to set all parameters to the default values
     * followed by a subsequent call of the store_nv_data command. This command
     * is named store_input_parameters in the datasheet.
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t storeNvData();

    /**
     * @brief llsetTemperatureOffsetForRhtMeasurements
     *
     * Sets the T-Offset for the temperature compensation of the RHT algorithm.
     *
     * @param[in] tOffset Temperature offset in degrees celsius. Accepted data
     * formats is a int16 value (2 bytes). Values are in degrees celsius with a
     * scaling of 200. Thus the provided value must be multiplied by 200.
     *
     * @note Execute the store command after writing the parameter to store it
     * in the non- volatile memory of the device otherwise the parameter will be
     * reset upton a device reset.
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t llsetTemperatureOffsetForRhtMeasurements(int16_t tOffset);

    /**
     * @brief setVocTuningParameters
     *
     * Sets parameters to customize the VOC algorithm. This command is only
     * available in idle mode. This command is named set_voc_parameters in the
     * datasheet.
     *
     * @param[in] vocIndexOffset VOC index representing typical (average)
     * conditions. Allowed values are in range 1..250. The default value is 100.
     * @param[in] learningTimeOffsetHours Time constant to estimate the VOC
     * algorithm offset from the history in hours. Past events will be forgotten
     * after about twice the learning time. Allowed values are in range 1..1000.
     * The default value is 12 hours.
     * @param[in] learningTimeGainHours Time constant to estimate the VOC
     * algorithm gain from the history in hours. Past events will be forgotten
     * after about twice the learning time. Allowed values are in range 1..1000.
     * The default value is 12 hours.
     * @param[in] gatingMaxDurationMinutes Maximum duration of gating in minutes
     * (freeze of estimator during high VOC index signal). Set to zero to
     * disable the gating. Allowed values are in range 0..3000. The default
     * value is 180 minutes.
     * @param[in] stdInitial Initial estimate for standard deviation. Lower
     * value boosts events during initial learning period, but may result in
     * larger device-to-device variations. Allowed values are in range 10..5000.
     * The default value is 50.
     * @param[in] gainFactor Gain factor to amplify or to attenuate the VOC
     * index output. Allowed values are in range 1..1000. The default value is
     * 230.
     *
     * @note Execute the store command after writing the parameter to store it
     * in the non- volatile memory of the device otherwise the parameter will be
     * reset upton a device reset.
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t setVocTuningParameters(int16_t vocIndexOffset,
                                   int16_t learningTimeOffsetHours,
                                   int16_t learningTimeGainHours,
                                   int16_t gatingMaxDurationMinutes,
                                   int16_t stdInitial, int16_t gainFactor);

    /**
     * @brief setNoxTuningParameters
     *
     * Sets parameters to customize the NOx algorithm. This command is only
     * available in idle mode. This command is named set_nox_parameters in the
     * datasheet.
     *
     * @param[in] noxIndexOffset NOx index representing typical (average)
     * conditions. Allowed values are in range 1..250. The default value is 1.
     * @param[in] learningTimeOffsetHours Time constant to estimate the NOx
     * algorithm offset from the history in hours. Past events will be forgotten
     * after about twice the learning time. Allowed values are in range 1..1000.
     * The default value is 12 hours.
     * @param[in] learningTimeGainHours The time constant to estimate the NOx
     * algorithm gain from the history has no impact for the NOx algorithm. This
     * parameter is still in place for consistency reasons with the VOC tuning
     * parameters command. This parameter must always be set to 12 hours.
     * @param[in] gatingMaxDurationMinutes Maximum duration of gating in minutes
     * (freeze of estimator during high NOx index signal). Set to zero to
     * disable the gating. Allowed values are in range 0..3000. The default
     * value is 720 minutes.
     * @param[in] stdInitial The initial estimate for standard deviation
     * parameter has no impact for the NOx algorithm. This parameter is still in
     * place for consistency reasons with the VOC tuning parameters command.
     * This parameter must always be set to 50.
     * @param[in] gainFactor Gain factor to amplify or to attenuate the NOx
     * index output. Allowed values are in range 1..1000. The default value is
     * 230.
     *
     * @note Execute the store command after writing the parameter to store it
     * in the non- volatile memory of the device otherwise the parameter will be
     * reset upton a device reset.
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t setNoxTuningParameters(int16_t noxIndexOffset,
                                   int16_t learningTimeOffsetHours,
                                   int16_t learningTimeGainHours,
                                   int16_t gatingMaxDurationMinutes,
                                   int16_t stdInitial, int16_t gainFactor);

    /**
     * @brief getVocState
     *
     * Gets the current VOC algorithm state. Retrieved values can be used to set
     * the VOC algorithm state to resume operation after a short interruption,
     * skipping initial learning phase. This command is only available during
     * measurement mode.
     *
     * @param[out] state Current VOC algorithm state.
     *
     * @note This feature can only be used after at least 3 hours of continuous
     * operation.
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t getVocState(uint8_t state[], uint16_t stateSize);

    /**
     * @brief getNoxState
     *
     * Gets the current NOx algorithm state. Retrieved values can be used to set
     * the NOx algorithm state to resume operation after a short interruption,
     * skipping initial learning phase. This command is only available during
     * measurement mode.
     *
     * @param[out] state Current NOx algorithm state.
     *
     * @note This feature can only be used after at least 3 hours of continuous
     * operation.
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t getNoxState(uint8_t state[], uint16_t stateSize);

    /**
     * @brief setVocState
     *
     * Set previously retrieved VOC algorithm state to resume operation after a
     * short interruption, skipping initial learning phase. This command is only
     * available in idle mode.
     *
     * @param[in] state Current VOC algorithm state.
     *
     * @note This feature should not be used after interruptions of more than 10
     * minutes.
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t setVocState(const uint8_t state[], uint16_t stateSize);

    /**
     * @brief setNoxState
     *
     * Set previously retrieved NOx algorithm state to resume operation after a
     * short interruption, skipping initial learning phase. This command is only
     * available in idle mode.
     *
     * @param[in] state Current NOx algorithm state.
     *
     * @note This feature should not be used after interruptions of more than 10
     * minutes.
     *
     * @return error_code 0 on success, an error code otherwise.
     */
    int16_t setNoxState(const uint8_t state[], uint16_t stateSize);

  private:
    Stream* _serial = nullptr;

    /**
     * @brief signalTemperature
     *
     * @param[in] temperatureRaw
     *
     * @return Compensated ambient temperature in degrees celsius.
     */
    float signalTemperature(int16_t temperatureRaw);

    /**
     * @brief signalHumidity
     *
     * @param[in] humidityRaw
     *
     * @return Compensated ambient humidity in %RH.
     */
    float signalHumidity(int16_t humidityRaw);

    /**
     * @brief signalVocIndex
     *
     * @param[in] vocIndexRaw
     *
     * @return VOC Index
     */
    float signalVocIndex(int16_t vocIndexRaw);

    /**
     * @brief signalNoxIndex
     *
     * @param[in] noxIndexRaw
     *
     * @return NOx Index
     */
    float signalNoxIndex(int16_t noxIndexRaw);
};

#endif  // SENSIRIONUARTSVM4X_H